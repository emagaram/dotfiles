cmd - 1: open -a "Brave Browser"
cmd + shift - 1: ~/dotfiles/shellScripts/openInNewWindowIfDNE.sh "Safari"
cmd - 2: open -a "kitty"
cmd - 3: open -a "Notes"
 
cmd - 5: open -a "Spotify"
cmd - 6: open -a "Microsoft Word"
cmd - 7: open -a "ChatGPT"
cmd - 8: open -a "System Preferences"
# cmd - 0: ~/dotfiles/shellScripts/findTerminal.sh lf 

# Bind cmd+shift-9 to store the current focused app name
cmd + shift - 9 : yabai -m query --windows --window | jq -r '.app' > ~/.current_binded_app
# Bind cmd-9 to focus the window of the app that was binded by cmd+shift-8
cmd - 9 : yabai -m window --focus "$(yabai -m query --windows | jq -r "map(select(.app == \"$(cat ~/.current_binded_app)\")) | .[0].id")"

cmd - 0x32: ~/dotfiles/shellScripts/openInNewWindowIfDNE.sh "Visual Studio Code"
alt - 0x32: ~/dotfiles/shellScripts/openInNewWindowIfDNE.sh "Docker Desktop"

alt - 1: open -a "Microsoft Word"
alt - 2: open -a "Whatsapp"
alt - 3: open -a "Messages"
alt - 4: open -a "Gmail"  
alt - 5: open -a "Google Calendar"
alt - 6: open -a "Discord"
# alt - 6: open -a "Slack
alt - 7: open -a "Google Maps"
# alt - 8: open -a "YouTube"
alt - 9: open -a "Steam"
alt - 0: open ~/Documents/layout.png
alt - p : yabai -m window --focus prev
alt - n : yabai -m window --focus next

# focus window
alt - j : ~/dotfiles/shellScripts/cycleFocus.sh
alt + shift - j : ~/dotfiles/shellScripts/cycleFocusBackwards.sh



ctrl + shift + cmd + alt - c: ~/dotfiles/shellScripts/cycleWindows.sh --focus next
# ctrl + shift + cmd + alt - c: shortcuts run "Color"
ctrl + shift + cmd + alt - v: ~/dotfiles/shellScripts/move_saved_window.sh
ctrl + shift + cmd + alt - i: open -a "Inkscape"
ctrl + shift + cmd + alt - t: open -a "Cold Turkey Blocker"
ctrl + shift + cmd + alt - f: yabai -m window --focus "$(yabai -m query --windows | jq -r 'map(select(.app == "Finder")) | .[0].id')"
ctrl + shift + cmd + alt - a: open -a "Anki"
ctrl + shift + cmd + alt - p: open -a "Adobe Photoshop 2025"
ctrl + shift + cmd + alt - s: open -a "Sublime Text"
ctrl + shift + cmd + alt - g: open -a "Gimp"
ctrl + shift + cmd + alt - e: open ~/Pictures/T10.png
ctrl + shift + cmd + alt - x: open -a "Xcode"
ctrl + shift + cmd + alt - b: open -a "Bitwarden"
ctrl + shift + cmd + alt - z: open -a "ProtonVPN"
ctrl + shift + cmd + alt - g: ~/dotfiles/shellScripts/openInNewWindowIfDNE.sh "pgAdmin 4"
ctrl + shift + cmd + alt - 1: open -a "Tor Browser""
ctrl + shift + cmd + alt - 7: open -a "Figma"
ctrl + shift + cmd + alt - 8: open -a "zoom.us"
ctrl + shift + cmd + alt - 9: open -a "Microsoft OneNote"
ctrl + shift + cmd + alt - 0: open ~/dotfiles/skhdrc

# creates and focuses new space
ctrl + shift + cmd + alt - n: yabai -m space --create && \
                  index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
                  yabai -m space --focus "${index}"
ctrl + shift + cmd + alt - s: ~/dotfiles/shellScripts/toggleStatusBar.sh 
ctrl + shift + cmd + alt - d: ~/dotfiles/shellScripts/autoDestroySpaces.sh



#Creates new space with current window
ctrl + shift - n: yabai -m space --create && \
                   index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
                   yabai -m window --space "${index}" && \
                   yabai -m space --focus "${index}"


# make just super? 
ctrl + shift - d: yabai -m space --destroy

#open wifi
# ctrl + shift + cmd - w: yabai -m space --create

# cmd - k: yabai -m space --focus next
# cmd - j: yabai -m space --focus prev


#Shifting workspaces
# ctrl + shift + cmd + alt - 1: ~/.config/skhd/moveToBeginning.sh 1
# ctrl + shift + cmd + alt - 2: ~/.config/skhd/moveToBeginning.sh 2
# ctrl + shift + cmd + alt - 3: ~/.config/skhd/moveToBeginning.sh 3
# ctrl + shift + cmd + alt - 4: ~/.config/skhd/moveToBeginning.sh 4
# ctrl + shift + cmd + alt - 5: ~/.config/skhd/moveToBeginning.sh 5
# ctrl + shift + cmd + alt - 6: ~/.config/skhd/moveToBeginning.sh 6
# ctrl + shift + cmd + alt - 7: ~/.config/skhd/moveToBeginning.sh 7
# ctrl + shift + cmd + alt - 8: ~/.config/skhd/moveToBeginning.sh 8
# ctrl + shift + cmd + alt - 9: ~/.config/skhd/moveToBeginning.sh 9

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# ctrl + shift + cmd + alt - n : yabai -m space --create && \
#                   index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index}"

# ctrl + shift + cmd + alt - d: yabai -m space --destroy
# ctrl + shift + cmd + alt - n: yabai -m space --create

# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #


# swap managed window
# shift + alt - h : yabai -m window --swap north
# lctrl - alt - cmd - return: open -n -a Alacritty
# move managed window
# shift + cmd - h : yabai -m window --warp east

# balance size of windows
# shift + alt - 0 : yabai -m space --balance

# make floating window fill screen
# shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
# shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# fast focus desktop
# cmd + alt - x : yabai -m space --focus recent
# cmd + alt - 1 : yabai -m space --focus 1

# send window to desktop and follow focus
# shift + cmd - z : yabai -m window --space next; yabai -m space --focus next
# shift + cmd - 2 : yabai -m window --space  2; yabai -m space --focus 2

# focus monitor
# ctrl + alt - z  : yabai -m display --focus prev
# ctrl + alt - 3  : yabai -m display --focus 3

# send window to monitor and follow focus
# ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# increase window size
# shift + alt - a : yabai -m window --resize left:-20:0
# shift + alt - w : yabai -m window --resize top:0:-20

# decrease window size
# shift + cmd - s : yabai -m window --resize bottom:0:-20
# shift + cmd - w : yabai -m window --resize top:0:20

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# toggle window zoom
# alt - d : yabai -m window --toggle zoom-parent
# alt - f : yabai -m window --toggle zoom-fullscreen

# toggle window split type
# alt - e : yabai -m window --toggle split

# float / unfloat window and center on screen
# alt - t : yabai -m window --toggle float --grid 4:4:1:1:2:2

# toggle sticky(+float), topmost, picture-in-picture
# alt - p : yabai -m window --toggle sticky --toggle topmost --toggle pip
